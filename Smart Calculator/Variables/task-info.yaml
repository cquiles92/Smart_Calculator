type: edu
custom_name: stage6
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // sum of positive numbers
                        output = main.execute("5 + 1 + 4").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot sum more than two numbers.");
                        }

                        // sum of numbers with different signs & negative answer
                        output = main.execute("23 - 17 - 13").trim();
                        if (!output.equals("-7")) {
                            return CheckResult.wrong("Incorrect sum of positive and negative numbers.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process a large number of numbers.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 7 - 4").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

    //                    // test of multiple operations
    //                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
    //                    if (!output.equals("10")) {
    //                        return CheckResult.wrong("The program cannot process multiple operations with several operators.");
    //                    }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing different assignments
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 5");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assignment without spaces
                        output = main.execute("m=2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assignment with extra spaces
                        output = main.execute("a    =  7");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assign the value of another variable
                        output = main.execute("c=  a ");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // test printing values of the variables
                        output = main.execute("a").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The variable stores not a correct value.");
                        }

                        output = main.execute("c").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // trying to assign a new variable after printing
                        output = main.execute("test = 0");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check if assignment was successful
                        output = main.execute("test").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The variable stores not a correct value.");
                        }

                        // trying to reassign
                        output = main.execute("test = 1");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // trying to reassign with the value of another variable
                        output = main.execute("a = test");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        output = main.execute("a").trim();
                        if (!output.equals("1")) {
                            return CheckResult.wrong("The program could not reassign variable.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing operations with variables
                        main.start();

                        // created some variables
                        String output = main.execute("a = 9\nb=2\nc = 1").trim();
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing simple sum
                        output = main.execute("a + b").trim();
                        if (!output.equals("11")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, addition operation.");
                        }

                        // subtraction testing
                        output = main.execute("b - a").trim();
                        if (!output.equals("-7")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, subtraction operation.");
                        }

                        // adding a negative number
                        output = main.execute("b + c").trim();
                        if (!output.equals("3")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, addition operation.");
                        }

                        // subtraction of negative number
                        output = main.execute("b - c").trim();
                        if (!output.equals("1")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, subtraction operation.");
                        }

                        // testing multiple operations
                        output = main.execute("a -- b - c + 3 --- a ++ 1").trim();
                        if (!output.equals("5")) {
                            return CheckResult.wrong("The program cannot perform several operations in one line.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // testing invalid variable name
                        String output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }
                        output = main.execute("кириллица = 123").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable.");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })
            );
        }
    }
  learner_created: false
- name: src/calculator/operations/AdditionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class AdditionOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int sum = 0;

            for (int arg : args) {
                sum += arg;
            }

            return sum;
        }
    }
  learner_created: true
- name: src/calculator/operations/ExponentiationOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class ExponentiationOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int result = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                result = (int) Math.pow(result, args[i]);
            }

            return result;
        }
    }
  learner_created: true
- name: src/calculator/operations/Operation.java
  visible: true
  text: |
    package calculator.operations;

    public interface Operation {
        int calculate(int... args);
    }
  learner_created: true
- name: src/calculator/InputHandler.java
  visible: true
  text: |-
    package calculator;

    import calculator.operations.Operator;

    import java.util.Stack;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class InputHandler {
        public InputHandler() {
        }

        static String cleanInput(String input) {
            //create spaces between parenthesis if not already there
            //left
            input = input.replaceAll("[(]", "( ");

            //right
            input = input.replaceAll("[)]", ") ");

            //clean plus symbol in front of operand
            input = input.replaceAll("(?=[+]\\d+)[+]", "");

            //clean extra spaces
            input = input.replaceAll("\\s+", " ");

            //clean extra operators
            StringBuilder copy = new StringBuilder(input);
            Pattern pattern = Pattern.compile("[-+*/]{2,}");
            Matcher matcher = pattern.matcher(input);

            while (matcher.find()) {
                String token = input.substring(matcher.start(), matcher.end());
                String singleChar;

                //grab the symbol or if the symbol == '-'
                //if there are even number of '-' change into '+'
                if (input.charAt(matcher.start()) == '-') {
                    if (token.length() % 2 == 0) {
                        singleChar = "+";
                    } else {
                        singleChar = "-";
                    }
                } else {
                    singleChar = token.substring(0, 1);
                }
                int indexStart = copy.indexOf(token);
                int indexEnd = indexStart + token.length();
                copy.replace(indexStart, indexEnd, singleChar);
            }
            return copy.toString();
        }

        boolean isOperator(String input) {
            return input.matches("[+/*^-]");
        }

        boolean isOperand(String input) {
    //        return input.matches("[-+]?[\\da-zA-Z]+");
            return input.matches("[-+]?\\d+");
        }

        String shuntingYardAlgorithm(String input) {
            StringBuilder rpnInput = new StringBuilder();
            Stack<String> operatorStack = new Stack<>();

            String[] tokens = input.split(" ");
            for (String token : tokens) {
                //is operand
                if (isOperand(token)) {
                    rpnInput.append(token).append(" ");
                } //left parenthesis
                else if (token.equals("(")) {
                    operatorStack.push(token);
                } //right parenthesis
                else if (token.equals(")")) {
                    while (!operatorStack.peek().equals("(")) {
                        rpnInput.append(operatorStack.pop()).append(" ");
                    }
                    //pop left parenthesis out
                    operatorStack.pop();
                } else {
                    //operators below
                    //if stack is not empty or there is no left parenthesis at top of stack
                    //check precedence and pop if necessary
                    while (!operatorStack.isEmpty() && isOperator(operatorStack.peek())
                           && selectOperator(token).getPrecedence() <= selectOperator(operatorStack.peek()).getPrecedence()) {
                        rpnInput.append(operatorStack.pop()).append(" ");
                    }
                    operatorStack.push(token);
                }
            }

            while (!operatorStack.isEmpty()) {
                rpnInput.append(operatorStack.pop()).append(" ");
            }

            return rpnInput.toString();
        }

        Operator selectOperator(String selection) {
            selection = selection.toUpperCase().trim();

            switch (selection) {
                case "+":
                    return Operator.ADDITION;
                case "-":
                    return Operator.SUBTRACTION;
                case "*":
                    return Operator.MULTIPLICATION;
                case "/":
                    return Operator.DIVISION;
                case "%":
                    return Operator.MODULO;
                case "^":
                    return Operator.EXPONENTIATION;
            }

            return null;
        }
    }
  learner_created: true
- name: src/calculator/operations/DivisionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class DivisionOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int quotient = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                quotient /= args[i];
            }

            return quotient;
        }
    }
  learner_created: true
- name: src/calculator/operations/ModuloOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class ModuloOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int remainder = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                remainder %= args[i];
            }

            return remainder;
        }
    }
  learner_created: true
- name: src/calculator/operations/SubtractionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class SubtractionOperation implements Operation {

        @Override
        public int calculate(int... args) {
            int sum = args[0];

            for (int i = 1; i < args.length; i++) {
                sum -= args[i];
            }

            return sum;
        }
    }
  learner_created: true
- name: src/calculator/operations/MultiplicationOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class MultiplicationOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int result = args.length == 0 ? 0 : 1;
            for (int arg : args) {
                result *= arg;
            }

            return result;
        }
    }
  learner_created: true
- name: src/calculator/operations/Operator.java
  visible: true
  text: |
    package calculator.operations;

    public enum Operator {
        ADDITION(1), SUBTRACTION(1), MULTIPLICATION(2), DIVISION(2), MODULO(2),
        EXPONENTIATION(3);

        private final int precedence;

        Operator(int precedence) {
            this.precedence = precedence;
        }

        public int getPrecedence() {
            return precedence;
        }
    }
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import calculator.operations.*;

    import java.util.Scanner;
    import java.util.Stack;

    public class Calculator {
        private final Scanner scanner;
        private final InputHandler inputHandler = new InputHandler();
        private Operation operation;
        private boolean quitProgram;

        Calculator() {
            scanner = new Scanner(System.in);
        }

        public void mainProgram() {
            quitProgram = false;
            while (!quitProgram) {
                String input = scanner.nextLine();
                processInput(input);
            }
        }

        private void processInput(String input) {
            if (input.trim().startsWith("/")) {
                if (input.toLowerCase().contains("/exit")) {
                    quitProgram();
                } else if (input.toLowerCase().contains("/help")) {
                    helpReadMe();
                } else {
                    System.out.println("Unknown command");
                }
            } else if (!input.trim().isEmpty()) {
                try {
                    String reversePolishInput = inputHandler.shuntingYardAlgorithm(InputHandler.cleanInput(input));
                    //process the reverse polish
                    //print answer
                    reversePolishInterpreter(reversePolishInput);

                } catch (Exception e) {
                    System.out.println("Invalid expression");
                }
            }
        }

        private void quitProgram() {
            System.out.println("Bye!");
            quitProgram = true;
        }

        private void helpReadMe() {
            System.out.println("The program calculates the sum and subtraction of numbers");
        }

        private void reversePolishInterpreter(String input) {
            //formatted line divided by spaces
            String[] tokens = input.split(" ");
            Stack<Integer> stack = new Stack<>();
            int x;
            int y;
    //        int result = 0;

            //no stack operations, only a single input
            if (tokens.length == 1 && inputHandler.isOperand(tokens[0])) {
                System.out.println(tokens[0]);
                return;
            }

            for (String token : tokens) {
                if (inputHandler.isOperand(token)) {
                    stack.push(Integer.parseInt(token));
                } else if (!inputHandler.isOperator(token)) {
                    System.out.println("Invalid expression");
                } else {
                    //pick correct strategy based off operator
                    setOperation(selectOperator(token));
                    x = stack.pop();
                    y = stack.pop();

                    stack.push(operation.calculate(y, x));
                }
            }
            if (stack.size() == 1) {
                System.out.println(stack.pop());
            } else {
                System.out.println("Invalid expression");
            }
        }


        private Operator selectOperator(String selection) {
            return inputHandler.selectOperator(selection);
        }

        private void setOperation(Operator operator) {
            if (operator != null) {
                switch (operator) {
                    case ADDITION:
                        operation = new AdditionOperation();
                        break;
                    case SUBTRACTION:
                        operation = new SubtractionOperation();
                        break;
                    case MULTIPLICATION:
                        operation = new MultiplicationOperation();
                        break;
                    case DIVISION:
                        operation = new DivisionOperation();
                        break;
                    case MODULO:
                        operation = new ModuloOperation();
                        break;
                    case EXPONENTIATION:
                        operation = new ExponentiationOperation();
                        break;
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5321#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 17 Jun 2022 02:39:35 UTC
record: 6
