type: edu
custom_name: stage7
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = -32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = -2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("-2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 9 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3 / 9)) * ((7 - 2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })
            );
        }
    }
  learner_created: false
- name: src/calculator/operations/AdditionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class AdditionOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int sum = 0;

            for (int arg : args) {
                sum += arg;
            }

            return sum;
        }
    }
  learner_created: true
- name: src/calculator/operations/ExponentiationOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class ExponentiationOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int result = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                result = (int) Math.pow(result, args[i]);
            }

            return result;
        }
    }
  learner_created: true
- name: src/calculator/operations/Operation.java
  visible: true
  text: |
    package calculator.operations;

    public interface Operation {
        int calculate(int... args);
    }
  learner_created: true
- name: src/calculator/InputHandler.java
  visible: true
  text: |-
    package calculator;

    import calculator.operations.Operator;

    import java.util.Stack;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class InputHandler {
        public InputHandler() {
        }

        static String cleanInput(String input) {
            //create spaces between parenthesis and equals if not already there
            //left
            input = input.replaceAll("[(]", "( ");

            //right
            input = input.replaceAll("[)]", ") ");

            //equals
            input = input.replaceAll("=", " = ");

            //clean plus symbol in front of operand
            input = input.replaceAll("(?=[+]\\d+)[+]", "");

            //clean extra spaces
            input = input.replaceAll("\\s+", " ");

            //clean extra operators
            StringBuilder copy = new StringBuilder(input);
            Pattern pattern = Pattern.compile("[-+*/%^=]{2,}");
            Matcher matcher = pattern.matcher(input);

            while (matcher.find()) {
                String token = input.substring(matcher.start(), matcher.end());
                String singleChar;

                //grab the symbol or if the symbol == '-'
                //if there are even number of '-' change into '+'
                if (input.charAt(matcher.start()) == '-') {
                    if (token.length() % 2 == 0) {
                        singleChar = "+";
                    } else {
                        singleChar = "-";
                    }
                } else {
                    singleChar = token.substring(0, 1);
                }
                int indexStart = copy.indexOf(token);
                int indexEnd = indexStart + token.length();
                copy.replace(indexStart, indexEnd, singleChar);
            }
            return copy.toString();
        }

        boolean isOperator(String input) {
            return input.matches("[+/%*^=-]");
        }

        boolean isOperand(String input) {
            return input.matches("[-+]?[\\da-zA-Z]+");
        }

        boolean isDigit(String input) {
            return input.matches("[-+]?\\d+");
        }

        boolean isVariable(String input) {
            return input.matches("[-+]?[a-zA-Z]+");
        }

        String shuntingYardAlgorithm(String input) {
            StringBuilder rpnInput = new StringBuilder();
            Stack<String> operatorStack = new Stack<>();

            String[] tokens = input.split(" ");
            for (String token : tokens) {
                //is operand
                if (isOperand(token)) {
                    rpnInput.append(token).append(" ");
                } //left parenthesis
                else if (token.equals("(")) {
                    operatorStack.push(token);
                } //right parenthesis
                else if (token.equals(")")) {
                    while (!operatorStack.peek().equals("(")) {
                        rpnInput.append(operatorStack.pop()).append(" ");
                    }
                    //pop left parenthesis out
                    operatorStack.pop();
                } else {
                    //operators below
                    //if stack is not empty or there is no left parenthesis at top of stack
                    //check precedence and pop if necessary
                    while (!operatorStack.isEmpty() && isOperator(operatorStack.peek())
                           && selectOperator(token).getPrecedence() <= selectOperator(operatorStack.peek()).getPrecedence()) {
                        rpnInput.append(operatorStack.pop()).append(" ");
                    }
                    operatorStack.push(token);
                }
            }

            while (!operatorStack.isEmpty()) {
                rpnInput.append(operatorStack.pop()).append(" ");
            }

            return rpnInput.toString();
        }

        Operator selectOperator(String selection) {
            selection = selection.toUpperCase().trim();

            switch (selection) {
                case "+":
                    return Operator.ADDITION;
                case "-":
                    return Operator.SUBTRACTION;
                case "*":
                    return Operator.MULTIPLICATION;
                case "/":
                    return Operator.DIVISION;
                case "%":
                    return Operator.MODULO;
                case "^":
                    return Operator.EXPONENTIATION;
                case "=":
                    return Operator.ASSIGNMENT;
            }

            return null;
        }
    }
  learner_created: true
- name: src/calculator/operations/DivisionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class DivisionOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int quotient = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                quotient /= args[i];
            }

            return quotient;
        }
    }
  learner_created: true
- name: src/calculator/operations/ModuloOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class ModuloOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int remainder = args.length == 0 ? 0 : args[0];

            for (int i = 1; i < args.length; i++) {
                remainder %= args[i];
            }

            return remainder;
        }
    }
  learner_created: true
- name: src/calculator/operations/SubtractionOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class SubtractionOperation implements Operation {

        @Override
        public int calculate(int... args) {
            int sum = args[0];

            for (int i = 1; i < args.length; i++) {
                sum -= args[i];
            }

            return sum;
        }
    }
  learner_created: true
- name: src/calculator/operations/MultiplicationOperation.java
  visible: true
  text: |
    package calculator.operations;

    public class MultiplicationOperation implements Operation {
        @Override
        public int calculate(int... args) {
            int result = args.length == 0 ? 0 : 1;
            for (int arg : args) {
                result *= arg;
            }

            return result;
        }
    }
  learner_created: true
- name: src/calculator/operations/Operator.java
  visible: true
  text: |
    package calculator.operations;

    public enum Operator {
        ADDITION(1), SUBTRACTION(1), MULTIPLICATION(2), DIVISION(2), MODULO(2),
        EXPONENTIATION(3), ASSIGNMENT(0);

        private final int precedence;

        Operator(int precedence) {
            this.precedence = precedence;
        }

        public int getPrecedence() {
            return precedence;
        }
    }
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import calculator.operations.*;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.Stack;

    public class Calculator {
        private final Scanner scanner;
        private final Map<String, Integer> variables;
        private final InputHandler inputHandler = new InputHandler();
        private Operation operation;
        private boolean quitProgram;

        Calculator() {
            scanner = new Scanner(System.in);
            variables = new HashMap<>();
        }

        public void mainProgram() {
            quitProgram = false;
            while (!quitProgram) {
                String input = scanner.nextLine();
                processInput(input);
            }
        }

        private void processInput(String input) {
            if (input.trim().startsWith("/")) {
                if (input.toLowerCase().contains("/exit")) {
                    quitProgram();
                } else if (input.toLowerCase().contains("/help")) {
                    helpReadMe();
                } else {
                    System.out.println("Unknown command");
                }
            } else if (!input.trim().isEmpty()) {
                try {
                    String reversePolishInput = inputHandler.shuntingYardAlgorithm(InputHandler.cleanInput(input));
                    //process the reverse polish
                    //print answer
                    reversePolishInterpreter(reversePolishInput);

                } catch (Exception e) {
                    System.out.println("Invalid expression");
                }
            }
        }

        private void quitProgram() {
            System.out.println("Bye!");
            quitProgram = true;
        }

        private void helpReadMe() {
            System.out.println("The program calculates the sum and subtraction of numbers");
        }

        private void reversePolishInterpreter(String input) {
            //formatted line divided by spaces
            String[] tokens = input.split(" ");
            Stack<String> stack = new Stack<>();
            int x;
            int y;

            //no stack operations, only a single input
            if (tokens.length == 1 && inputHandler.isOperand(tokens[0])) {
                if (inputHandler.isVariable(tokens[0])) {
                    if (variables.containsKey(tokens[0])) {
                        tokens[0] = variables.get(tokens[0]).toString();
                    } else {
                        System.out.println("Unknown variable");
                        return;
                    }
                }
                System.out.println(tokens[0]);
                return;
            }

            for (String token : tokens) {
                if (inputHandler.isOperand(token)) {
                    if (inputHandler.isVariable(token) || inputHandler.isDigit(token)) {
                        stack.push(token);
                    } //illegal sequence e.g. abc1 as variable name
                    else {
                        System.out.println("Invalid identifier");
                        return;
                    }
                } else if (!inputHandler.isOperator(token)) {
                    System.out.println("Invalid expression");
                } else {
                    //pick correct strategy based off operator
                    Operator currentOperation = selectOperator(token);
                    if (inputHandler.isDigit(stack.peek())) {
                        x = Integer.parseInt(stack.pop());
                    } else {
                        if (variables.containsKey(stack.peek())) {
                            x = variables.get(stack.pop());
                        } else {
                            System.out.println("Unknown variable");
                            return;
                        }
                    }
                    if (currentOperation == Operator.ASSIGNMENT) {
                        //y = x
                        String variable = stack.pop();
                        variables.put(variable, x);
                    } else {
                        setOperation(currentOperation);

                        if (inputHandler.isDigit(stack.peek())) {
                            y = Integer.parseInt(stack.pop());
                        } else {
                            if (variables.containsKey(stack.peek())) {
                                y = variables.get(stack.pop());
                            } else {
                                System.out.println("Unknown variable");
                                return;
                            }
                        }
                        stack.push(String.valueOf(operation.calculate(y, x)));
                    }
                }
            }
            if (stack.size() == 1) {
                if (inputHandler.isVariable(stack.peek())) {
                    System.out.println(variables.get(stack.pop()));
                } else {
                    System.out.println(stack.pop());
                }
            } else if (stack.size() > 1) {
                System.out.println("Invalid expression");
            }

        }


        private Operator selectOperator(String selection) {
            return inputHandler.selectOperator(selection);
        }

        private void setOperation(Operator operator) {
            if (operator != null) {
                switch (operator) {
                    case ADDITION:
                        operation = new AdditionOperation();
                        break;
                    case SUBTRACTION:
                        operation = new SubtractionOperation();
                        break;
                    case MULTIPLICATION:
                        operation = new MultiplicationOperation();
                        break;
                    case DIVISION:
                        operation = new DivisionOperation();
                        break;
                    case MODULO:
                        operation = new ModuloOperation();
                        break;
                    case EXPONENTIATION:
                        operation = new ExponentiationOperation();
                        break;
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5322#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 17 Jun 2022 03:06:28 UTC
record: 7
